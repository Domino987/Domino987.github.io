{"version":3,"sources":["components/Input.js","components/Chart.js","components/Chart3D.js","components/Analysis.js","components/Content.js","App.js","index.js"],"names":["parseInput","input","lines","split","dataArray","forEach","line","i","data","type","mode","name","x","y","z","currentLocation","command","step","xDirection","yDirection","startsWith","steps","Number","slice","newLocation","push","parse3DInput","TextInput","setInput","set3DDate","useState","setInputURL","Grid","container","spacing","item","xs","TextField","placeholder","rows","fullWidth","onChange","event","target","value","Button","onClick","variant","color","endIcon","Chart","layout","width","height","Analysis","intersects","setIntersects","intersectSteps","setIntersectSteps","isLoading","setLoading","useEffect","setTimeout","Promise","resolve","map","d","lineString","length","result","lineIntersect","features","sort","a","b","Math","abs","geometry","coordinates","stepsIntersec","intersect","line1Count","findIndex","line2Count","Box","textAlign","CircularProgress","size","disableShrink","intersection","key","theme","createMuiTheme","Content","setDate","data3D","ThemeProvider","CssBaseline","AppBar","position","Toolbar","Typography","Chart3D","App","className","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.06bde017.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport { TextField, Button, Grid } from '@material-ui/core';\r\n\r\nconst myInput = 'R1001,D915,R511,D336,L647,D844,R97,D579,L336,U536,L645,D448,R915,D473,L742,D470,R230,D558,R214,D463,L374,D450,R68,U625,L937,D135,L860,U406,L526,U555,R842,D988,R819,U995,R585,U218,L516,D756,L438,U921,R144,D62,R238,U144,R286,U934,L682,U13,L287,D588,L880,U630,L882,D892,R559,D696,L329,D872,L946,U219,R593,U536,R402,U946,L866,U690,L341,U729,R84,U997,L579,D609,R407,D846,R225,U953,R590,U79,R590,U725,L890,D384,L442,D364,R600,D114,R39,D962,R413,U698,R762,U520,L180,D557,R35,U902,L476,U95,R830,U858,L312,U879,L85,U620,R505,U248,L341,U81,L323,U296,L53,U532,R963,D30,L380,D60,L590,U699,R967,U88,L725,D730,R706,D337,L248,D46,R131,U541,L313,U508,R120,D719,R28,U342,R555,U780,R397,D523,L619,D820,R865,D4,L790,D544,L873,D249,L220,U343,R818,U803,R309,D576,R811,D717,L800,D171,R523,U630,L854,U265,R207,U147,R518,U237,R822,D672,L140,U580,R408,D739,L519,U759,R664,D61,R258,D313,R472,U437,R975,U828,L54,D892,L370,U509,L80,U593,L268,U856,L177,U950,L266,U29,R493,D228,L110,U390,L92,U8,L288,U732,R459,D422,R287,D359,R915,U295,R959,U215,R82,D357,L970,D782,L653,U399,L50,D720,R788,D396,L562,D560,R798,D196,R79,D732,R332,D957,L106,D199,R756,U379,R716,U282,R812,U346,R592,D416,L454,U612,L160,U884,R373,U306,R55,D492,R175,D233,L249,D616,L342,D650,L181,U868,L761,D170,L976,U711,R377,D113,L548,U39,R62,D99,R853,U249,L951,U617,R257,U457,R430,D355,L541,U595,L176,D987,R365,D77,L181,D192,L688,D942,R617,U484,R247,U180,R771,D392,R184,U597,L682,U454,R856,U616,R174,U629,L607,U41,L970,D602,R402,D208,R826 L994,U238,R605,U233,L509,U81,R907,U880,R666,D86,R6,U249,R345,D492,L912,U770,L827,D107,R988,D525,L471,U706,R31,U485,R835,D778,R419,D461,L937,D740,R559,U309,L379,U385,R828,D698,R276,U914,L911,U969,R282,D365,L43,D911,R256,D592,L451,U162,L829,D564,R349,U279,R19,D110,R259,D551,L172,D899,L924,D819,R532,U737,L794,U995,R168,D359,R847,U426,R224,U984,L929,D531,L797,U292,L332,D280,R317,D648,R776,D52,R916,U363,R919,U890,R583,U961,L89,D680,L894,D226,L83,U68,R551,U413,R259,D468,L702,U453,L128,U986,R238,U805,R431,U546,R944,D142,R677,D783,R336,D220,R40,U391,R5,D760,L963,D764,R653,U932,R473,U311,L189,D883,R216,U391,L634,U275,L691,U975,R130,D543,L163,U736,R964,U729,R752,D531,R90,D471,R687,D341,R441,U562,R570,U278,R570,U177,L232,U781,L874,U258,R180,D28,R916,D395,R96,U954,L222,U578,L394,U775,L851,D18,L681,D912,L761,U945,L866,D12,R420,D168,R490,U679,R521,D91,L782,U583,L823,U656,L365,D517,R319,U725,L824,D531,L747,U822,R893,D162,L11,D913,L295,D65,L393,D351,L432,U828,L131,D384,R311,U381,L26,D635,L180,D395,L576,D836,R548,D820,L219,U749,L64,D2,L992,U104,L501,U247,R693,D862,R16,U346,R332,U618,R387,U4,L206,U943,R734,D164,R771,U17,L511,D475,L75,U965,R116,D627,R243,D77,R765,D831,L51,U879,R207,D500,R289,U749,R206,D850,R832,U407,L985,U514,R290,U617,L697,U812,L633,U936,R214,D447,R509,D585,R787,D500,R305,D598,R866,U781,L771,D350,R558,U669,R284,D686,L231,U574,L539,D337,L135,D751,R315,D344,L694,D947,R118,U377,R50,U181,L96,U904,L776,D268,L283,U233,L757,U536,L161,D881,R724,D572,R322'\r\n\r\nconst TextInput = ({ setInput, set3DDate }) => {\r\n\r\n    const [input, setInputURL] = useState(myInput);\r\n\r\n    const loadInput = () => {\r\n        setInput(parseInput(input));\r\n        set3DDate(parse3DInput(input));\r\n    }\r\n\r\n    return <Grid container={true} spacing={1}>\r\n        <Grid item={true} xs={11}>\r\n            <TextField\r\n                placeholder={'Input'}\r\n                rows={2}\r\n                fullWidth={true}\r\n                onChange={event => setInputURL(event.target.value)}\r\n                value={input}\r\n            />\r\n        </Grid>\r\n        <Grid item={true} xs={1}>\r\n            <Button\r\n                onClick={loadInput}\r\n                variant=\"contained\"\r\n                color=\"default\"\r\n                endIcon={<SendIcon />}\r\n            >\r\n                Load\r\n      </Button>\r\n        </Grid>\r\n    </Grid>;\r\n}\r\n\r\nconst parseInput = input => {\r\n    const lines = input.split(' ');\r\n    const dataArray = []\r\n    lines.forEach((line, i) => {\r\n        const data = {\r\n            type: 'scatter',\r\n            mode: 'lines',\r\n            name: `Line ${i + 1}`,\r\n            x: [],\r\n            y: [],\r\n            z: []\r\n        }\r\n        let currentLocation = [0, 0];\r\n        line.split(',').forEach((command, step) => {\r\n            let xDirection = 0\r\n            let yDirection = 1\r\n            if (command.startsWith('L')) {\r\n                yDirection = -1\r\n            }\r\n            if (command.startsWith('U')) {\r\n                xDirection = 1\r\n            }\r\n            if (command.startsWith('D')) {\r\n                xDirection = 1\r\n                yDirection = -1\r\n            }\r\n            const steps = Number(command.slice(1));\r\n            for (let i = 0; i < steps; i++) {\r\n                const newLocation = [...currentLocation];\r\n                newLocation[xDirection] += yDirection\r\n                data.x.push(newLocation[0]);\r\n                data.y.push(newLocation[1]);\r\n                data.z.push(step);\r\n                currentLocation = newLocation\r\n            }\r\n        })\r\n        dataArray.push(data);\r\n    })\r\n\r\n    return dataArray\r\n}\r\n\r\n\r\nconst parse3DInput = input => {\r\n    const lines = input.split(' ');\r\n    const dataArray = []\r\n    lines.forEach((line, i) => {\r\n        const data = {\r\n            type: 'scatter3d',\r\n            mode: 'lines',\r\n            name: `Line ${i + 1}`,\r\n            x: [],\r\n            y: [],\r\n            z: []\r\n        }\r\n        let currentLocation = [0, 0];\r\n        line.split(',').forEach((command, step) => {\r\n            let xDirection = 0\r\n            let yDirection = 1\r\n            if (command.startsWith('L')) {\r\n                yDirection = -1\r\n            }\r\n            if (command.startsWith('U')) {\r\n                xDirection = 1\r\n            }\r\n            if (command.startsWith('D')) {\r\n                xDirection = 1\r\n                yDirection = -1\r\n            }\r\n            const steps = Number(command.slice(1));\r\n            for (let i = 0; i < steps; i++) {\r\n                const newLocation = [...currentLocation];\r\n                newLocation[xDirection] += yDirection\r\n                data.x.push(newLocation[0]);\r\n                data.y.push(newLocation[1]);\r\n                data.z.push(step);\r\n                currentLocation = newLocation\r\n            }\r\n        })\r\n        dataArray.push(data);\r\n    })\r\n\r\n    return dataArray\r\n}\r\n\r\n\r\nexport default TextInput","import React from 'react';\r\nimport Plot from 'react-plotly.js';\r\n\r\n\r\nconst Chart = ({ data }) => <Plot\r\n    data={data}\r\n    layout={{ width: '100%', height: '100%' }}\r\n/>\r\n\r\n\r\nexport default Chart;","import React from 'react';\r\nimport Plot from 'react-plotly.js';\r\n\r\n\r\nconst Chart = ({ data }) => <Plot\r\n    data={data}\r\n    layout={{ width: '100%', height: '100%' }}\r\n/>\r\n\r\n\r\nexport default Chart;","import React, { useState, useEffect } from 'react';\r\nimport lineIntersect from '@turf/line-intersect';\r\nimport lineString from 'turf-linestring';\r\nimport { CircularProgress, Grid, Box } from '@material-ui/core';\r\n\r\nconst Analysis = ({ data }) => {\r\n\r\n    const [intersects, setIntersects] = useState([]);\r\n\r\n    const [intersectSteps, setIntersectSteps] = useState([]);\r\n\r\n    const [isLoading, setLoading] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setLoading(true);\r\n        const calculateData = () => {\r\n            new Promise(resolve => {\r\n                const lines = data.map(d => lineString(d.x.map((x, i) => [x, d.y[i]])));\r\n                if (lines.length !== 0) {\r\n                    const result = lineIntersect(...lines).features;\r\n                    setIntersects(result\r\n                        .sort((a, b) => Math.abs(a.geometry.coordinates[0]) + Math.abs(a.geometry.coordinates[1]) - Math.abs((b.geometry.coordinates[0]) - Math.abs(b.geometry.coordinates[1]))))\r\n\r\n                    const stepsIntersec = result.map(intersect => {\r\n                        const line1Count = data[0].x.findIndex((x, i) => x === intersect.geometry.coordinates[0] && data[0].y[i] === intersect.geometry.coordinates[1]) + 1;\r\n                        const line2Count = data[1].x.findIndex((x, i) => x === intersect.geometry.coordinates[0] && data[1].y[i] === intersect.geometry.coordinates[1]) + 1;\r\n                        return {\r\n                            x: intersect.geometry.coordinates[0],\r\n                            y: intersect.geometry.coordinates[1],\r\n                            line1Count,\r\n                            line2Count\r\n                        }\r\n                    }).sort((a, b) => a.line1Count + a.line2Count - b.line1Count - b.line2Count);\r\n                    setIntersectSteps(stepsIntersec)\r\n                }\r\n                setLoading(false);\r\n                resolve();\r\n            });\r\n        }\r\n        setTimeout(calculateData);\r\n    }, [data])\r\n\r\n    return <div>\r\n        <Box textAlign='center'>\r\n            {isLoading && <CircularProgress size={25} disableShrink={true} variant='indeterminate' />}\r\n        </Box>\r\n        <Grid container={true}>\r\n            <Grid item={true} xs={6}><Box textAlign='center'>Solution 1 ({intersects.length} Intersections)</Box></Grid>\r\n            <Grid item={true} xs={6}><Box textAlign='center'>Solution 2 ({intersects.length} Intersections)</Box></Grid>\r\n            <Grid item={true} xs={6}>\r\n                <Box textAlign='center'>\r\n                    {\r\n                        intersects\r\n                            .map((intersection, i) => <p key={i}>\r\n                                Intersection: {intersection.geometry.coordinates[0]}/{intersection.geometry.coordinates[1]}, Distance {Math.abs(intersection.geometry.coordinates[0]) + Math.abs(intersection.geometry.coordinates[1])}\r\n                            </p>)\r\n                    }\r\n                </Box>\r\n\r\n            </Grid>\r\n            <Grid item={true} xs={6}>\r\n                <Box textAlign='center'>\r\n                    {\r\n                        intersectSteps\r\n                            .map((intersection, i) => <p key={i}>\r\n                                Intersection: {intersection.x}/{intersection.y}, Distance 1:{intersection.line1Count} + Distance 2:{intersection.line2Count} = {intersection.line1Count + intersection.line2Count}\r\n                            </p>)\r\n                    }\r\n                </Box>\r\n            </Grid>\r\n\r\n        </Grid>\r\n\r\n    </div>\r\n}\r\n\r\n\r\nexport default Analysis;","import React, { useState } from 'react';\r\nimport TextInput from './Input';\r\nimport Chart from './Chart';\r\nimport Chart3D from './Chart3D';\r\nimport Analysis from './Analysis';\r\nimport { createMuiTheme, ThemeProvider, CssBaseline, Grid, AppBar, Toolbar, Typography } from '@material-ui/core';\r\n\r\n\r\nconst theme = createMuiTheme({});\r\n\r\nconst Content = () => {\r\n\r\n    const [data, setDate] = useState([]);\r\n    const [data3D, set3DDate] = useState([]);\r\n\r\n    return <ThemeProvider theme={theme}>\r\n        <CssBaseline />\r\n        <AppBar position=\"static\">\r\n            <Toolbar>\r\n                <Typography variant=\"h6\">\r\n                    Advent of Code\r\n                </Typography>\r\n            </Toolbar>\r\n        </AppBar>\r\n        <Grid container={true} spacing={1}>\r\n            <Grid item={true} xs={12}>\r\n                <TextInput\r\n                    set3DDate={set3DDate}\r\n                    setInput={setDate} />\r\n            </Grid>\r\n            <Grid xs={6} item={true}>\r\n                <Chart data={data} />\r\n            </Grid>\r\n            <Grid xs={6} item={true}>\r\n                <Chart3D data={data3D} />\r\n            </Grid>\r\n            <Grid xs={12} item={true}>\r\n                <Analysis data={data} />\r\n            </Grid>\r\n        </Grid>\r\n    </ThemeProvider>\r\n}\r\n\r\n\r\nexport default Content;","import React from 'react';\nimport Content from './components/Content';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <main>\n        <Content/>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}