{"version":3,"sources":["components/TabPanel.tsx","components/Input.js","components/Chart.js","components/day3/Analysis.js","components/day3/day3.js","components/day3/index.tsx","components/day8/View.tsx","components/day8/index.tsx","components/Content.js","App.js","index.js"],"names":["TabPanel","props","children","value","index","other","Typography","component","role","hidden","id","aria-labelledby","Box","p","parseInput","input","lines","split","dataArray","forEach","line","i","data","type","mode","name","x","y","z","currentLocation","command","step","xDirection","yDirection","startsWith","steps","Number","slice","newLocation","push","parse3DInput","TextInput","setInput","isLoading","day","useState","setInputURL","useEffect","Grid","container","spacing","item","xs","TextField","label","rows","fullWidth","onChange","event","target","Button","onClick","variant","color","endIcon","CircularProgress","size","disableShrink","Plot","createPlotlyComponent","Plotly","Chart","fullscreen","setFullScreen","hide","setHide","enabled","isFull","setTimeout","style","width","height","layout","hovermode","autosize","autoexpand","margin","b","l","r","t","showlegend","config","displaylogo","useResizeHandler","Analysis","intersects","intersectSteps","lg","Card","CardHeader","title","length","Math","abs","geometry","coordinates","CardContent","Table","aria-label","TableHead","TableRow","TableCell","TableBody","map","row","key","scope","line1Count","line2Count","align","useStyles","makeStyles","theme","padding","perc2color","perc","g","round","toString","Day3","setData","data3D","set3DData","setIntersects","setIntersectSteps","setLoading","classes","className","inputData","input3D","Promise","resolve","d","lineString","result","lineIntersect","features","sort","a","stepsIntersec","intersect","findIndex","dataWithIntersects","maxSteps","reduce","count","intersectPlot","marker","text","data3DIntersetction","z1","z2","md","calcImgData","layers","seperateLayers","imgHeight","fewest0","undefined","minCount","pow","layer","countDigits","n","calculateImages","reverse","img","Array","from","mergeLayer","imgRows","transformToPlotly","copy","number","digit","xData","yData","View","bestLayer","setBestLayer","imgData","setImgData","flexGrow","Content","selectedDay","setDay","CssBaseline","AppBar","position","Toolbar","Tabs","e","v","Tab","IconButton","window","location","href","alt","src","createMuiTheme","App","ThemeProvider","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e79e2b66.chunk.js","sourcesContent":["import React, { FC } from 'react';\r\nimport { Typography, Box } from '@material-ui/core';\r\n\r\n\r\ninterface TabPanelProps {\r\n    children?: React.ReactNode;\r\n    index: any;\r\n    value: any;\r\n}\r\n\r\n\r\nconst TabPanel: FC<TabPanelProps> = props => {\r\n    const { children, value, index, ...other } = props;\r\n\r\n    return (\r\n        <Typography\r\n            component=\"div\"\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`simple-tabpanel-${index}`}\r\n            aria-labelledby={`simple-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && <Box p={3}>{children}</Box>}\r\n        </Typography>\r\n    );\r\n}\r\n\r\nexport default TabPanel;","import React, { useState, useEffect } from 'react';\r\n\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport { TextField, Button, Grid, CircularProgress } from '@material-ui/core';\r\n\r\nconst day3Input = 'R1001,D915,R511,D336,L647,D844,R97,D579,L336,U536,L645,D448,R915,D473,L742,D470,R230,D558,R214,D463,L374,D450,R68,U625,L937,D135,L860,U406,L526,U555,R842,D988,R819,U995,R585,U218,L516,D756,L438,U921,R144,D62,R238,U144,R286,U934,L682,U13,L287,D588,L880,U630,L882,D892,R559,D696,L329,D872,L946,U219,R593,U536,R402,U946,L866,U690,L341,U729,R84,U997,L579,D609,R407,D846,R225,U953,R590,U79,R590,U725,L890,D384,L442,D364,R600,D114,R39,D962,R413,U698,R762,U520,L180,D557,R35,U902,L476,U95,R830,U858,L312,U879,L85,U620,R505,U248,L341,U81,L323,U296,L53,U532,R963,D30,L380,D60,L590,U699,R967,U88,L725,D730,R706,D337,L248,D46,R131,U541,L313,U508,R120,D719,R28,U342,R555,U780,R397,D523,L619,D820,R865,D4,L790,D544,L873,D249,L220,U343,R818,U803,R309,D576,R811,D717,L800,D171,R523,U630,L854,U265,R207,U147,R518,U237,R822,D672,L140,U580,R408,D739,L519,U759,R664,D61,R258,D313,R472,U437,R975,U828,L54,D892,L370,U509,L80,U593,L268,U856,L177,U950,L266,U29,R493,D228,L110,U390,L92,U8,L288,U732,R459,D422,R287,D359,R915,U295,R959,U215,R82,D357,L970,D782,L653,U399,L50,D720,R788,D396,L562,D560,R798,D196,R79,D732,R332,D957,L106,D199,R756,U379,R716,U282,R812,U346,R592,D416,L454,U612,L160,U884,R373,U306,R55,D492,R175,D233,L249,D616,L342,D650,L181,U868,L761,D170,L976,U711,R377,D113,L548,U39,R62,D99,R853,U249,L951,U617,R257,U457,R430,D355,L541,U595,L176,D987,R365,D77,L181,D192,L688,D942,R617,U484,R247,U180,R771,D392,R184,U597,L682,U454,R856,U616,R174,U629,L607,U41,L970,D602,R402,D208,R826 L994,U238,R605,U233,L509,U81,R907,U880,R666,D86,R6,U249,R345,D492,L912,U770,L827,D107,R988,D525,L471,U706,R31,U485,R835,D778,R419,D461,L937,D740,R559,U309,L379,U385,R828,D698,R276,U914,L911,U969,R282,D365,L43,D911,R256,D592,L451,U162,L829,D564,R349,U279,R19,D110,R259,D551,L172,D899,L924,D819,R532,U737,L794,U995,R168,D359,R847,U426,R224,U984,L929,D531,L797,U292,L332,D280,R317,D648,R776,D52,R916,U363,R919,U890,R583,U961,L89,D680,L894,D226,L83,U68,R551,U413,R259,D468,L702,U453,L128,U986,R238,U805,R431,U546,R944,D142,R677,D783,R336,D220,R40,U391,R5,D760,L963,D764,R653,U932,R473,U311,L189,D883,R216,U391,L634,U275,L691,U975,R130,D543,L163,U736,R964,U729,R752,D531,R90,D471,R687,D341,R441,U562,R570,U278,R570,U177,L232,U781,L874,U258,R180,D28,R916,D395,R96,U954,L222,U578,L394,U775,L851,D18,L681,D912,L761,U945,L866,D12,R420,D168,R490,U679,R521,D91,L782,U583,L823,U656,L365,D517,R319,U725,L824,D531,L747,U822,R893,D162,L11,D913,L295,D65,L393,D351,L432,U828,L131,D384,R311,U381,L26,D635,L180,D395,L576,D836,R548,D820,L219,U749,L64,D2,L992,U104,L501,U247,R693,D862,R16,U346,R332,U618,R387,U4,L206,U943,R734,D164,R771,U17,L511,D475,L75,U965,R116,D627,R243,D77,R765,D831,L51,U879,R207,D500,R289,U749,R206,D850,R832,U407,L985,U514,R290,U617,L697,U812,L633,U936,R214,D447,R509,D585,R787,D500,R305,D598,R866,U781,L771,D350,R558,U669,R284,D686,L231,U574,L539,D337,L135,D751,R315,D344,L694,D947,R118,U377,R50,U181,L96,U904,L776,D268,L283,U233,L757,U536,L161,D881,R724,D572,R322'\r\n\r\nconst day8Inputr\n\r\nconst TextInput = ({ setInput, isLoading, day }) => {\r\n\r\n    const [input, setInputURL] = useState('');\r\n\r\n    useEffect(() => {\r\n        switch (day) {\r\n            case 3: setInputURL(day3Input); break;\r\n            case 8: setInputURL(day8Input); break;\r\n            default:\r\n                setInputURL('')\r\n        }\r\n    }, [day]);\r\n\r\n    const loadInput = () => {\r\n        switch (day) {\r\n            case 3: setInput(parseInput(input), parse3DInput(input)); break;\r\n            case 8: setInput(input); break;\r\n            default:\r\n                    setInput('')\r\n        }\r\n\r\n    }\r\n\r\n    return <Grid container={true} spacing={1}>\r\n        <Grid item={true} xs={11}>\r\n            <TextField\r\n                label='Your Input'\r\n                rows={2}\r\n                fullWidth={true}\r\n                onChange={event => setInputURL(event.target.value)}\r\n                value={input}\r\n            />\r\n        </Grid>\r\n        <Grid item={true} xs={1}>\r\n            <Button\r\n                onClick={loadInput}\r\n                variant=\"contained\"\r\n                color=\"default\"\r\n                endIcon={isLoading ? <CircularProgress size={25} disableShrink={true} /> : <SendIcon color='primary' />}\r\n            >\r\n                Load\r\n      </Button>\r\n        </Grid>\r\n    </Grid>;\r\n}\r\n\r\nconst parseInput = input => {\r\n    const lines = input.split(' ');\r\n    const dataArray = []\r\n    lines.forEach((line, i) => {\r\n        const data = {\r\n            type: 'scatter',\r\n            mode: 'lines',\r\n            name: `Line ${i + 1}`,\r\n            x: [],\r\n            y: [],\r\n            z: []\r\n        }\r\n        let currentLocation = [0, 0];\r\n        line.split(',').forEach((command, step) => {\r\n            let xDirection = 0\r\n            let yDirection = 1\r\n            if (command.startsWith('L')) {\r\n                yDirection = -1\r\n            }\r\n            if (command.startsWith('U')) {\r\n                xDirection = 1\r\n            }\r\n            if (command.startsWith('D')) {\r\n                xDirection = 1\r\n                yDirection = -1\r\n            }\r\n            const steps = Number(command.slice(1));\r\n            for (let i = 0; i < steps; i++) {\r\n                const newLocation = [...currentLocation];\r\n                newLocation[xDirection] += yDirection\r\n                data.x.push(newLocation[0]);\r\n                data.y.push(newLocation[1]);\r\n                data.z.push(step);\r\n                currentLocation = newLocation\r\n            }\r\n        })\r\n        dataArray.push(data);\r\n    })\r\n\r\n    return dataArray\r\n}\r\n\r\n\r\nconst parse3DInput = input => {\r\n    const lines = input.split(' ');\r\n    const dataArray = []\r\n    lines.forEach((line, i) => {\r\n        const data = {\r\n            type: 'scatter3d',\r\n            mode: 'lines',\r\n            name: `Line ${i + 1}`,\r\n            x: [],\r\n            y: [],\r\n            z: []\r\n        }\r\n        let currentLocation = [0, 0, 0];\r\n        line.split(',').forEach(command => {\r\n            let xDirection = 0\r\n            let yDirection = 1\r\n            if (command.startsWith('L')) {\r\n                yDirection = -1\r\n            }\r\n            if (command.startsWith('U')) {\r\n                xDirection = 1\r\n            }\r\n            if (command.startsWith('D')) {\r\n                xDirection = 1\r\n                yDirection = -1\r\n            }\r\n            const steps = Number(command.slice(1));\r\n            for (let i = 0; i < steps; i++) {\r\n                const newLocation = [...currentLocation];\r\n                newLocation[xDirection] += yDirection\r\n                newLocation[2] += 1;\r\n                data.x.push(newLocation[0]);\r\n                data.y.push(newLocation[1]);\r\n                data.z.push(newLocation[2]);\r\n                currentLocation = newLocation\r\n            }\r\n        })\r\n        dataArray.push(data);\r\n    })\r\n\r\n    return dataArray\r\n}\r\n\r\n\r\nexport default TextInput","import React, { useState } from 'react';\r\nimport { Button } from '@material-ui/core';\r\nimport Fullscreen from \"react-full-screen\";\r\nimport createPlotlyComponent from 'react-plotly.js/factory';\r\nimport Plotly from 'plotly.js-gl3d-dist'\r\n\r\n\r\nconst Plot = createPlotlyComponent(Plotly);\r\n\r\nconst Chart = ({ data }) => {\r\n\r\n    const [fullscreen, setFullScreen] = useState(false);\r\n\r\n    const [hide, setHide] = useState(false);\r\n\r\n    if (hide) {\r\n        return null;\r\n    }\r\n\r\n    return <div>\r\n        <Button onClick={() => setFullScreen(true)}>FullScreen</Button>\r\n        <Fullscreen\r\n            enabled={fullscreen}\r\n            onChange={isFull => {\r\n                if (!isFull && fullscreen) {\r\n                    setFullScreen(false)\r\n                    setHide(true)\r\n                    setTimeout(() => {\r\n                        setHide(false);\r\n                    }, 50);\r\n                }\r\n            }}\r\n        >\r\n            <Plot\r\n                data={data}\r\n                style={{ width: '100%', height: '100%' }}\r\n                layout={{\r\n                    hovermode: 'closest',\r\n                    autosize: true,\r\n                    autoexpand: true,\r\n                    margin: {\r\n                        b: 40,\r\n                        l: 70,\r\n                        r: 10,\r\n                        t: 40,\r\n                    },\r\n                    showlegend: true,\r\n                }}\r\n                config={{ displaylogo: false }}\r\n                useResizeHandler={true}\r\n            />\r\n        </Fullscreen>\r\n    </div>\r\n}\r\n\r\n\r\nexport default Chart;","import React from 'react';\r\nimport { Grid, Table, TableHead, TableRow, TableCell, TableBody, CardHeader, CardContent, Card } from '@material-ui/core';\r\n\r\nconst Analysis = ({ intersects, intersectSteps }) => {\r\n\r\n    return <div>\r\n        <Grid container={true}>\r\n            <Grid item={true} xs={12} lg={6}>\r\n                <Card>\r\n                    <CardHeader title={`Intersections Solution 1 (${intersects.length !== 0 ? Math.abs(intersects[0].geometry.coordinates[0]) + Math.abs(intersects[0].geometry.coordinates[1]) : 0})`} />\r\n                    <CardContent>\r\n                        <Table size=\"small\" aria-label=\"a dense table\">\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell>Number</TableCell>\r\n                                    <TableCell>Location (x/y)</TableCell>\r\n                                    <TableCell>Distance to Center</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {intersects.map((row, i) => (\r\n                                    <TableRow key={i}>\r\n                                        <TableCell component=\"th\" scope=\"row\">\r\n                                            {i}\r\n                                        </TableCell>\r\n                                        <TableCell>{row.geometry.coordinates[0]}/{row.geometry.coordinates[1]}</TableCell>\r\n                                        <TableCell>{Math.abs(row.geometry.coordinates[0]) + Math.abs(row.geometry.coordinates[1])}</TableCell>\r\n                                    </TableRow>\r\n                                ))}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </CardContent>\r\n                </Card>\r\n            </Grid>\r\n            <Grid item={true} xs={12} lg={6}>\r\n                <Card>\r\n                    <CardHeader title={`Intersections Solution 2 (${intersectSteps.length !== 0 ? (intersectSteps[0].line1Count + intersectSteps[0].line2Count) : 0})`} />\r\n                    <CardContent>\r\n                        <Table size=\"small\" aria-label=\"a dense table\">\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell>Number</TableCell>\r\n                                    <TableCell align=\"right\">Location (x/y)</TableCell>\r\n                                    <TableCell align=\"right\">Steps Wire 1</TableCell>\r\n                                    <TableCell align=\"right\">Steps Wire 2</TableCell>\r\n                                    <TableCell align=\"right\">Total Steps</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {intersectSteps.map((row, i) => (\r\n                                    <TableRow key={i}>\r\n                                        <TableCell component=\"th\" scope=\"row\">\r\n                                            {i}\r\n                                        </TableCell>\r\n                                        <TableCell align=\"right\">{row.x}/{row.y}</TableCell>\r\n                                        <TableCell align=\"right\">{row.line1Count}</TableCell>\r\n                                        <TableCell align=\"right\">{row.line2Count}</TableCell>\r\n                                        <TableCell align=\"right\">{row.line1Count + row.line2Count}</TableCell>\r\n                                    </TableRow>\r\n                                ))}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </CardContent>\r\n                </Card>\r\n            </Grid>\r\n\r\n        </Grid>\r\n\r\n    </div>\r\n}\r\n\r\n\r\nexport default Analysis;","import React, { useState } from 'react';\r\nimport TextInput from '../Input';\r\nimport Chart from '../Chart';\r\nimport Analysis from './Analysis';\r\nimport { Grid } from '@material-ui/core';\r\nimport lineIntersect from '@turf/line-intersect';\r\nimport lineString from 'turf-linestring';\r\nimport { makeStyles } from '@material-ui/styles';\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    container: {\r\n        padding: theme.spacing(2)\r\n    }\r\n}));\r\n\r\n\r\nconst Day3 = () => {\r\n\r\n    const [data, setData] = useState([]);\r\n\r\n    const [data3D, set3DData] = useState([]);\r\n\r\n    const [intersects, setIntersects] = useState([]);\r\n\r\n    const [intersectSteps, setIntersectSteps] = useState([]);\r\n\r\n    const [isLoading, setLoading] = useState(false);\r\n\r\n    const classes = useStyles();\r\n\r\n    const setInput = (inputData, input3D) => {\r\n        setLoading(true);\r\n        const calculateData = () => {\r\n            new Promise(resolve => {\r\n                const lines = inputData.map(d => lineString(d.x.map((x, i) => [x, d.y[i]])));\r\n                if (lines.length !== 0) {\r\n                    const result = lineIntersect(...lines).features;\r\n                    setIntersects(result\r\n                        .sort((a, b) => Math.abs(a.geometry.coordinates[0]) + Math.abs(a.geometry.coordinates[1]) - Math.abs((b.geometry.coordinates[0]) - Math.abs(b.geometry.coordinates[1]))))\r\n\r\n                    let stepsIntersec = result.map(intersect => {\r\n                        const line1Count = inputData[0].x.findIndex((x, i) => x === intersect.geometry.coordinates[0] && inputData[0].y[i] === intersect.geometry.coordinates[1]) + 1;\r\n                        const line2Count = inputData[1].x.findIndex((x, i) => x === intersect.geometry.coordinates[0] && inputData[1].y[i] === intersect.geometry.coordinates[1]) + 1;\r\n                        return {\r\n                            x: intersect.geometry.coordinates[0],\r\n                            y: intersect.geometry.coordinates[1],\r\n                            line1Count,\r\n                            line2Count\r\n                        }\r\n                    }).sort((a, b) => Math.abs(a.x) + Math.abs(a.y) - Math.abs(b.x) - Math.abs(b.y));\r\n                    const dataWithIntersects = [...inputData];\r\n                    let maxSteps = stepsIntersec.reduce((count, i) => count < (Math.abs(i.x) + Math.abs(i.y)) ? (Math.abs(i.x) + Math.abs(i.y)) : count, 0);\r\n                    const intersectPlot = {\r\n                        type: 'scatter',\r\n                        mode: 'markers',\r\n                        marker: {\r\n                            color: stepsIntersec.map((i, index) => index === 0 ? 'black' : 40 - ((Math.abs(i.x) + Math.abs(i.y)) / maxSteps * 40))\r\n                        },\r\n                        name: `Intersections`,\r\n                        x: stepsIntersec.map(i => i.x),\r\n                        y: stepsIntersec.map(i => i.y),\r\n                        text: stepsIntersec.map((i, index) => `${index === 0 ? 'Best Value Solution 1: ' : 'Distance to 0/0:'} ${i.x + i.y}`),\r\n                    }\r\n                    dataWithIntersects.push(intersectPlot)\r\n                    setData(dataWithIntersects);\r\n                    stepsIntersec = [...stepsIntersec].sort((a, b) => a.line1Count + a.line2Count - b.line1Count - b.line2Count);\r\n                    setIntersectSteps(stepsIntersec);\r\n                    const data3DIntersetction = [...input3D];\r\n                    maxSteps = stepsIntersec.reduce((count, i) => count < (i.line1Count + i.line2Count) ? i.line1Count + i.line2Count : count, 0);\r\n                    stepsIntersec.forEach((intersect, index) => {\r\n                        const z1 = input3D[0].x.findIndex((x, i) => x === intersect.x && input3D[0].y[i] === intersect.y) + 1;\r\n                        const z2 = input3D[1].x.findIndex((x, i) => x === intersect.x && input3D[1].y[i] === intersect.y) + 1;\r\n                        data3DIntersetction.push({\r\n                            type: 'scatter3d',\r\n                            mode: 'lines',\r\n                            line: {\r\n                                color: index === 0 ? '#000' : perc2color((maxSteps - intersect.line1Count - intersect.line2Count) / maxSteps * 100)\r\n                            },\r\n                            name: `${index === 0 ? 'Best Value Solution 2: ' : ''}${intersect.x}/${intersect.x}/${z1 + z1}`,\r\n                            x: [intersect.x, intersect.x],\r\n                            y: [intersect.y, intersect.y],\r\n                            z: [z1, z2]\r\n                        });\r\n                    });\r\n                    set3DData(data3DIntersetction)\r\n                }\r\n                setLoading(false);\r\n                resolve();\r\n            });\r\n        }\r\n        setTimeout(calculateData);\r\n    };\r\n\r\n\r\n    return <Grid container={true} spacing={1} className={classes.container}>\r\n        <Grid item={true} xs={12}>\r\n            <TextInput\r\n                day={3}\r\n                isLoading={isLoading}\r\n                setInput={setInput} />\r\n        </Grid>\r\n        <Grid xs={12} md={6} item={true}>\r\n            <Chart data={data} />\r\n        </Grid>\r\n        <Grid xs={12} md={6}item={true}>\r\n            <Chart data={data3D} />\r\n        </Grid>\r\n        <Grid xs={12} md={12} item={true}>\r\n            <Analysis\r\n                intersects={intersects}\r\n                intersectSteps={intersectSteps} />\r\n        </Grid>\r\n    </Grid>\r\n}\r\n\r\n\r\nfunction perc2color(perc) {\r\n    let r, g, b = 0;\r\n    if (perc < 50) {\r\n        r = 255;\r\n        g = Math.round(5.1 * perc);\r\n    }\r\n    else {\r\n        g = 255;\r\n        r = Math.round(510 - 5.10 * perc);\r\n    }\r\n    const h = r * 0x10000 + g * 0x100 + b * 0x1;\r\n    return '#' + ('000000' + h.toString(16)).slice(-6);\r\n}\r\n\r\n\r\nexport default Day3;","import day from './day3';\r\n\r\n\r\nexport default day;","import React, { useState } from 'react';\r\nimport TextInput from '../Input';\r\nimport { Grid, Theme, Typography } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport Chart from '../Chart';\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    container: {\r\n        padding: theme.spacing(2)\r\n    }\r\n}));\r\n\r\nconst imgHeight = 6\r\nconst imgWidth = 25\r\n\r\nconst calcImgData = (data: number[]) => {\r\n    const imgSize = imgHeight * imgWidth;\r\n    const layers = seperateLayers(data, imgSize)\r\n    let fewest0 = undefined\r\n    let minCount = Math.pow(2, 53) - 1;\r\n    layers.forEach(layer => {\r\n        const count = countDigits(layer, 0)\r\n        if (count < minCount) {\r\n            minCount = count\r\n            fewest0 = layer\r\n        }\r\n    });\r\n    if (!fewest0) {\r\n        return -1;\r\n    }\r\n    return countDigits(fewest0, 1) * countDigits(fewest0, 2)\r\n}\r\n\r\n\r\nconst seperateLayers = (data: number[], n: number) => {\r\n    const result: number[][] = [];\r\n    for (let i = 0; i < data.length; i += n) {\r\n        result.push(data.slice(i, i + n))\r\n    }\r\n    return result;\r\n}\r\n\r\n\r\nconst calculateImages = (data: number[]) => {\r\n    const imgSize = imgHeight * imgWidth;\r\n    const layers = seperateLayers(data, imgSize)\r\n    layers.reverse()\r\n    let img = Array.from(Array(imgSize), () => 0);\r\n    layers.forEach(layer => {\r\n        img = mergeLayer(img, layer)\r\n    });\r\n    const imgRows = seperateLayers(img, imgWidth);\r\n    return transformToPlotly(imgRows);\r\n}\r\n\r\n\r\nconst mergeLayer = (img: number[], layer: number[]) => {\r\n    const imgSize = imgHeight * imgWidth;\r\n    const copy = [...layer]\r\n    for (let i = 0; i < imgSize; i++) {\r\n        if (copy[i] === 2) {\r\n            copy[i] = img[i]\r\n        }\r\n    }\r\n    return copy\r\n}\r\n\r\n\r\nconst countDigits = (layer: number[], number: number) => {\r\n    let count = 0\r\n    layer.forEach(digit => {\r\n        if (digit === number) {\r\n            count += 1;\r\n        }\r\n    });\r\n    return count\r\n}\r\n\r\nconst transformToPlotly = (data: number[][]) => {\r\n    const xData: number[] = [0]\r\n    const yData: number[] = [imgHeight]\r\n    data.reverse();\r\n    for (let y = 0; y < imgHeight; y++) {\r\n        const row = data[y];\r\n        for (let x = 0; x < imgWidth; x++) {\r\n            if (row[x] === 1) {\r\n                xData.push(x)\r\n                yData.push(y)\r\n            }\r\n        }\r\n    }\r\n    return [{\r\n        x: xData,\r\n        y: yData,\r\n        mode: 'markers',\r\n        marker: {\r\n            color: ['#FFF', ...xData.slice(1).map(() => '#000')]\r\n        }\r\n    }];\r\n}\r\n\r\n\r\n\r\nconst View = () => {\r\n\r\n    const [bestLayer, setBestLayer] = useState(-1);\r\n\r\n    const [imgData, setImgData] = useState<Array<{ x: number[], y: number[], mode: string }>>([]);\r\n\r\n    const [isLoading, setLoading] = useState(false);\r\n\r\n    const classes = useStyles();\r\n\r\n    const setInput = async (input: string) => {\r\n        setLoading(true)\r\n        await new Promise(resolve => {\r\n            const data = input.split('').map(Number);\r\n            setBestLayer(calcImgData(data));\r\n            setImgData(calculateImages(data));\r\n        });\r\n        setLoading(false);\r\n\r\n    };\r\n\r\n\r\n    return <Grid container={true} spacing={1} className={classes.container}>\r\n        <Grid item={true} xs={12}>\r\n            <TextInput\r\n                day={8}\r\n                isLoading={isLoading}\r\n                setInput={setInput} />\r\n        </Grid>\r\n        {bestLayer !== -1 && <Grid item={true} xs={12}>\r\n            <Typography>\r\n                Solution 1\r\n            </Typography>\r\n            <Typography>\r\n                The value of the layer with the last amount of zeros is: {bestLayer}\r\n            </Typography>\r\n        </Grid>}\r\n        {bestLayer !== -1 && <Grid item={true} xs={12}>\r\n            <Typography>\r\n                Solution 2\r\n            </Typography>\r\n            <Grid xs={12} item={true}>\r\n                <Chart data={imgData} />\r\n            </Grid>\r\n        </Grid>}\r\n\r\n    </Grid>\r\n}\r\n\r\n\r\n\r\nexport default View;","import View from './View';\r\n\r\nexport  default View;","import React, { useState } from 'react';\r\nimport { CssBaseline, AppBar, Toolbar, Typography, IconButton, Tabs, makeStyles, Tab } from '@material-ui/core';\r\nimport TabPanel from './TabPanel';\r\nimport Day3 from './day3';\r\nimport Day8 from './day8';\r\n\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    title: {\r\n        flexGrow: 1,\r\n    }\r\n});\r\n\r\n\r\nconst Content = () => {\r\n\r\n    const classes = useStyles();\r\n\r\n    const [selectedDay, setDay] = useState(0);\r\n\r\n    return <>\r\n        <CssBaseline />\r\n        <AppBar position=\"static\">\r\n            <Toolbar>\r\n                <Typography variant=\"h6\" className={classes.title}>\r\n                    Advent of Code\r\n                </Typography>\r\n                <Tabs value={selectedDay} onChange={(e, v) => setDay(v)}>\r\n                    <Tab label=\"Day 3\" value={0} />\r\n                    <Tab label=\"Day 8\" value={1} />\r\n                </Tabs>\r\n                <IconButton onClick={() => window.location.href = 'https://github.com/Domino987/aoc_3_19'}>\r\n                    <img height={25} alt='Repo' src='/assets/github.png' />\r\n                </IconButton>\r\n            </Toolbar>\r\n        </AppBar>\r\n        <TabPanel value={selectedDay} index={0}>\r\n            <Day3 />\r\n        </TabPanel>\r\n        <TabPanel value={selectedDay} index={1}>\r\n            <Day8 />\r\n        </TabPanel>\r\n    </>\r\n}\r\n\r\n\r\n\r\nexport default Content;","import React from 'react';\nimport Content from './components/Content';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core';\n\nconst theme = createMuiTheme({});\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <div className=\"App\">\n        <main>\n          <Content />\n        </main>\n      </div>\n    </ThemeProvider>\n\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}